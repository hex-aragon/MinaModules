import { fetchMerkleLeaves, fetchMerkleMap, fromActionWithoutHashes, toAction, toKeyHash, } from './offchain-state-serialization.js';
import { Field } from '../../provable/wrapped.js';
import { OffchainStateCommitments, OffchainStateRollup, } from './offchain-state-rollup.js';
import { Option } from '../../provable/option.js';
import { assert } from '../../provable/gadgets/common.js';
import { Actions } from '../account-update.js';
import { Provable } from '../../provable/provable.js';
import { Poseidon } from '../../provable/crypto/poseidon.js';
import { smartContractContext } from '../smart-contract-context.js';
import { MerkleWitness } from '../../provable/merkle-tree.js';
export { OffchainState, OffchainStateCommitments };
const MerkleWitness256 = MerkleWitness(256);
/**
 * Offchain state for a `SmartContract`.
 *
 * ```ts
 * // declare your offchain state
 *
 * const offchainState = OffchainState({
 *   accounts: OffchainState.Map(PublicKey, UInt64),
 *   totalSupply: OffchainState.Field(UInt64),
 * });
 *
 * // use it in a contract, by adding an onchain state field of type `OffchainStateCommitments`
 *
 * class MyContract extends SmartContract {
 *  \@state(OffchainStateCommitments) offchainState = State(
 *    OffchainStateCommitments.empty()
 *   );
 *
 *   // ...
 * }
 *
 * // set the contract instance
 *
 * let contract = new MyContract(address);
 * offchainState.setContractInstance(contract);
 * ```
 *
 * See the individual methods on `offchainState` for more information on usage.
 */
function OffchainState(config) {
    // setup internal state of this "class"
    let internal = {
        _contract: undefined,
        _merkleMap: undefined,
        _valueMap: undefined,
        get contract() {
            assert(internal._contract !== undefined, 'Must call `setContractAccount()` first');
            return internal._contract;
        },
    };
    const onchainActionState = async () => {
        let actionState = (await internal.contract.offchainState.fetch())
            ?.actionState;
        assert(actionState !== undefined, 'Could not fetch action state');
        return actionState;
    };
    const merkleMaps = async () => {
        if (internal._merkleMap !== undefined && internal._valueMap !== undefined) {
            return { merkleMap: internal._merkleMap, valueMap: internal._valueMap };
        }
        let actionState = await onchainActionState();
        let { merkleMap, valueMap } = await fetchMerkleMap(internal.contract, actionState);
        internal._merkleMap = merkleMap;
        internal._valueMap = valueMap;
        return { merkleMap, valueMap };
    };
    let rollup = OffchainStateRollup();
    function contract() {
        let ctx = smartContractContext.get();
        assert(ctx !== null, 'Offchain state methods must be called within a contract method');
        assert(ctx.this.constructor === internal.contract.constructor, 'Offchain state methods can only be called on the same contract that you called setContractInstance() on');
        return ctx.this;
    }
    /**
     * generic get which works for both fields and maps
     */
    async function get(key, valueType) {
        // get onchain merkle root
        let stateRoot = contract().offchainState.getAndRequireEquals().root;
        // witness the actual value
        const optionType = Option(valueType);
        let value = await Provable.witnessAsync(optionType, async () => {
            let { valueMap } = await merkleMaps();
            let valueFields = valueMap.get(key.toBigInt());
            if (valueFields === undefined) {
                return optionType.none();
            }
            let value = fromActionWithoutHashes(valueType, valueFields);
            return optionType.from(value);
        });
        // witness a merkle witness
        let witness = await Provable.witnessAsync(MerkleWitness256, async () => {
            let { merkleMap } = await merkleMaps();
            return new MerkleWitness256(merkleMap.getWitness(key.toBigInt()));
        });
        // anchor the value against the onchain root and passed in key
        // we also allow the value to be missing, in which case the map must contain the 0 element
        let valueHash = Provable.if(value.isSome, Poseidon.hashPacked(valueType, value.value), Field(0));
        let actualKey = witness.calculateIndex();
        let actualRoot = witness.calculateRoot(valueHash);
        key.assertEquals(actualKey, 'key mismatch');
        stateRoot.assertEquals(actualRoot, 'root mismatch');
        return value;
    }
    function field(index, type) {
        const prefix = Field(index);
        let optionType = Option(type);
        return {
            overwrite(value) {
                // serialize into action
                let action = toAction({
                    prefix,
                    keyType: undefined,
                    valueType: type,
                    key: undefined,
                    value: type.fromValue(value),
                });
                // push action on account update
                let update = contract().self;
                update.body.actions = Actions.pushEvent(update.body.actions, action);
            },
            update({ from, to }) {
                // serialize into action
                let action = toAction({
                    prefix,
                    keyType: undefined,
                    valueType: type,
                    key: undefined,
                    value: type.fromValue(to),
                    previousValue: optionType.fromValue(from),
                });
                // push action on account update
                let update = contract().self;
                update.body.actions = Actions.pushEvent(update.body.actions, action);
            },
            async get() {
                let key = toKeyHash(prefix, undefined, undefined);
                return await get(key, type);
            },
        };
    }
    function map(index, keyType, valueType) {
        const prefix = Field(index);
        let optionType = Option(valueType);
        return {
            overwrite(key, value) {
                // serialize into action
                let action = toAction({
                    prefix,
                    keyType,
                    valueType,
                    key,
                    value: valueType.fromValue(value),
                });
                // push action on account update
                let update = contract().self;
                update.body.actions = Actions.pushEvent(update.body.actions, action);
            },
            update(key, { from, to }) {
                // serialize into action
                let action = toAction({
                    prefix,
                    keyType,
                    valueType,
                    key,
                    value: valueType.fromValue(to),
                    previousValue: optionType.fromValue(from),
                });
                // push action on account update
                let update = contract().self;
                update.body.actions = Actions.pushEvent(update.body.actions, action);
            },
            async get(key) {
                let keyHash = toKeyHash(prefix, keyType, key);
                return await get(keyHash, valueType);
            },
        };
    }
    return {
        setContractInstance(contract) {
            internal._contract = contract;
        },
        async compile() {
            await rollup.compile();
        },
        async createSettlementProof() {
            let { merkleMap } = await merkleMaps();
            // fetch pending actions
            let actionState = await onchainActionState();
            let actions = await fetchMerkleLeaves(internal.contract, {
                fromActionState: actionState,
            });
            let result = await rollup.prove(merkleMap, actions);
            // update internal merkle maps as well
            // TODO make this not insanely recompute everything
            // - take new tree from `result`
            // - update value map in `prove()`, or separately based on `actions`
            let { merkleMap: newMerkleMap, valueMap: newValueMap } = await fetchMerkleMap(internal.contract);
            internal._merkleMap = newMerkleMap;
            internal._valueMap = newValueMap;
            return result.proof;
        },
        Proof: rollup.Proof,
        async settle(proof) {
            // verify the proof
            proof.verify();
            // check that proof moves state forward from the one currently stored
            let state = contract().offchainState.getAndRequireEquals();
            Provable.assertEqual(OffchainStateCommitments, state, proof.publicInput);
            // require that proof uses the correct pending actions
            contract().account.actionState.requireEquals(proof.publicOutput.actionState);
            // update the state
            contract().offchainState.set(proof.publicOutput);
        },
        fields: Object.fromEntries(Object.entries(config).map(([key, kind], i) => [
            key,
            kind.kind === 'offchain-field'
                ? field(i, kind.type)
                : map(i, kind.keyType, kind.valueType),
        ])),
    };
}
OffchainState.Map = OffchainMap;
OffchainState.Field = OffchainField;
function OffchainField(type) {
    return { kind: 'offchain-field', type };
}
function OffchainMap(key, value) {
    return { kind: 'offchain-map', keyType: key, valueType: value };
}
//# sourceMappingURL=offchain-state.js.map